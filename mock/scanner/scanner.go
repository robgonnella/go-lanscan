// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/robgonnella/go-lanscan/pkg/scanner (interfaces: Scanner,PacketCaptureHandle,PacketCapture)
//
// Generated by this command:
//
//	mockgen -destination=../../mock/scanner/scanner.go -package=mock_scanner . Scanner,PacketCaptureHandle,PacketCapture
//
// Package mock_scanner is a generated GoMock package.
package mock_scanner

import (
	reflect "reflect"
	time "time"

	gopacket "github.com/google/gopacket"
	scanner "github.com/robgonnella/go-lanscan/pkg/scanner"
	gomock "go.uber.org/mock/gomock"
)

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// IncludeVendorInfo mocks base method.
func (m *MockScanner) IncludeVendorInfo(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncludeVendorInfo", arg0)
}

// IncludeVendorInfo indicates an expected call of IncludeVendorInfo.
func (mr *MockScannerMockRecorder) IncludeVendorInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncludeVendorInfo", reflect.TypeOf((*MockScanner)(nil).IncludeVendorInfo), arg0)
}

// Scan mocks base method.
func (m *MockScanner) Scan() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan")
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockScannerMockRecorder) Scan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan))
}

// SetAccuracy mocks base method.
func (m *MockScanner) SetAccuracy(arg0 scanner.Accuracy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccuracy", arg0)
}

// SetAccuracy indicates an expected call of SetAccuracy.
func (mr *MockScannerMockRecorder) SetAccuracy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccuracy", reflect.TypeOf((*MockScanner)(nil).SetAccuracy), arg0)
}

// SetIdleTimeout mocks base method.
func (m *MockScanner) SetIdleTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIdleTimeout", arg0)
}

// SetIdleTimeout indicates an expected call of SetIdleTimeout.
func (mr *MockScannerMockRecorder) SetIdleTimeout(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdleTimeout", reflect.TypeOf((*MockScanner)(nil).SetIdleTimeout), arg0)
}

// SetPacketCapture mocks base method.
func (m *MockScanner) SetPacketCapture(arg0 scanner.PacketCapture) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPacketCapture", arg0)
}

// SetPacketCapture indicates an expected call of SetPacketCapture.
func (mr *MockScannerMockRecorder) SetPacketCapture(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPacketCapture", reflect.TypeOf((*MockScanner)(nil).SetPacketCapture), arg0)
}

// SetRequestNotifications mocks base method.
func (m *MockScanner) SetRequestNotifications(arg0 func(*scanner.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequestNotifications", arg0)
}

// SetRequestNotifications indicates an expected call of SetRequestNotifications.
func (mr *MockScannerMockRecorder) SetRequestNotifications(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequestNotifications", reflect.TypeOf((*MockScanner)(nil).SetRequestNotifications), arg0)
}

// Stop mocks base method.
func (m *MockScanner) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockScannerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockScanner)(nil).Stop))
}

// MockPacketCaptureHandle is a mock of PacketCaptureHandle interface.
type MockPacketCaptureHandle struct {
	ctrl     *gomock.Controller
	recorder *MockPacketCaptureHandleMockRecorder
}

// MockPacketCaptureHandleMockRecorder is the mock recorder for MockPacketCaptureHandle.
type MockPacketCaptureHandleMockRecorder struct {
	mock *MockPacketCaptureHandle
}

// NewMockPacketCaptureHandle creates a new mock instance.
func NewMockPacketCaptureHandle(ctrl *gomock.Controller) *MockPacketCaptureHandle {
	mock := &MockPacketCaptureHandle{ctrl: ctrl}
	mock.recorder = &MockPacketCaptureHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketCaptureHandle) EXPECT() *MockPacketCaptureHandleMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPacketCaptureHandle) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPacketCaptureHandleMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPacketCaptureHandle)(nil).Close))
}

// ReadPacketData mocks base method.
func (m *MockPacketCaptureHandle) ReadPacketData() ([]byte, gopacket.CaptureInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPacketData")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(gopacket.CaptureInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadPacketData indicates an expected call of ReadPacketData.
func (mr *MockPacketCaptureHandleMockRecorder) ReadPacketData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPacketData", reflect.TypeOf((*MockPacketCaptureHandle)(nil).ReadPacketData))
}

// SetBPFFilter mocks base method.
func (m *MockPacketCaptureHandle) SetBPFFilter(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBPFFilter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBPFFilter indicates an expected call of SetBPFFilter.
func (mr *MockPacketCaptureHandleMockRecorder) SetBPFFilter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBPFFilter", reflect.TypeOf((*MockPacketCaptureHandle)(nil).SetBPFFilter), arg0)
}

// WritePacketData mocks base method.
func (m *MockPacketCaptureHandle) WritePacketData(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePacketData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePacketData indicates an expected call of WritePacketData.
func (mr *MockPacketCaptureHandleMockRecorder) WritePacketData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePacketData", reflect.TypeOf((*MockPacketCaptureHandle)(nil).WritePacketData), arg0)
}

// MockPacketCapture is a mock of PacketCapture interface.
type MockPacketCapture struct {
	ctrl     *gomock.Controller
	recorder *MockPacketCaptureMockRecorder
}

// MockPacketCaptureMockRecorder is the mock recorder for MockPacketCapture.
type MockPacketCaptureMockRecorder struct {
	mock *MockPacketCapture
}

// NewMockPacketCapture creates a new mock instance.
func NewMockPacketCapture(ctrl *gomock.Controller) *MockPacketCapture {
	mock := &MockPacketCapture{ctrl: ctrl}
	mock.recorder = &MockPacketCaptureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketCapture) EXPECT() *MockPacketCaptureMockRecorder {
	return m.recorder
}

// OpenLive mocks base method.
func (m *MockPacketCapture) OpenLive(arg0 string, arg1 int32, arg2 bool, arg3 time.Duration) (scanner.PacketCaptureHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenLive", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(scanner.PacketCaptureHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenLive indicates an expected call of OpenLive.
func (mr *MockPacketCaptureMockRecorder) OpenLive(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenLive", reflect.TypeOf((*MockPacketCapture)(nil).OpenLive), arg0, arg1, arg2, arg3)
}

// SerializeLayers mocks base method.
func (m *MockPacketCapture) SerializeLayers(arg0 gopacket.SerializeBuffer, arg1 gopacket.SerializeOptions, arg2 ...gopacket.SerializableLayer) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SerializeLayers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SerializeLayers indicates an expected call of SerializeLayers.
func (mr *MockPacketCaptureMockRecorder) SerializeLayers(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializeLayers", reflect.TypeOf((*MockPacketCapture)(nil).SerializeLayers), varargs...)
}
