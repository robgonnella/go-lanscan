// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/robgonnella/go-lanscan/internal/core (interfaces: Runner)
//
// Generated by this command:
//
//	mockgen -destination=../mock/core/core.go -package=mock_core . Runner
//
// Package mock_core is a generated GoMock package.
package mock_core

import (
	reflect "reflect"

	scanner "github.com/robgonnella/go-lanscan/pkg/scanner"
	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockRunner) Initialize(arg0 scanner.Scanner, arg1 chan *scanner.ScanResult, arg2, arg3 int, arg4, arg5, arg6 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Initialize indicates an expected call of Initialize.
func (mr *MockRunnerMockRecorder) Initialize(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockRunner)(nil).Initialize), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Run mocks base method.
func (m *MockRunner) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRunnerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run))
}
